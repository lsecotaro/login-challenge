plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.lsecotaro'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

jar {
	manifest {
		attributes 'Main-Class': 'com.lsecotaro.login_challenge.LoginChallengeApplication'
	}
}

bootJar {
	archiveBaseName.set("login-challenge")
	archiveVersion.set("")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'junit:junit:4.13.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	include "**/*Test*"
	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
	environment 'spring.profiles.active', 'test'
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*Application.*",
					"**/*Dto.*",
					"**/parameter/*.*",
					"**/*Builder.*",
					"**/config/*",
					"**/model/*"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

